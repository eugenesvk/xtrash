use crate::*;
use crate::binmod::{xattr_key,xattr_group};

use bpaf	::{*, long as l, short as s, positional as pos}; // short names to allow starting builders
use super::bpaf_ext::*;

#[derive(Debug,Clone)] pub struct Opt {pub group:bool, pub undo:bool, pub paths:Vec<PathBuf>,}

pub fn options() -> OptionParser<Opt> {
  let group	= s('g').l("group"   ).h("Move all items to a â€˜xtrash_15êž‰01êž‰17_123â€™-styled subdir (alias: bÌ²atch)")
    .      	  s('b').l("batch").switch();
  let undo 	= s('u').l("undo"   ).h("âŽŒ Undo trashing (alias: rÌ²estore): path to
    1. â€˜xtrash_15êž‰01êž‰17_123â€™-styled batch subdir in ðŸ—‘ to restore all of its items
    2. a single file in ðŸ—‘ to restore it
    3. TBD parent dir to restore any children still in ðŸ—‘ that were removed from that dir
    4. TBD a single file to restore if any found in ðŸ—‘ (latest removed is restored if multiple)")
    .      	  s('r').l("restore").switch();
  let paths	= pos::<PathBuf>("PATH").some("Expecting paths to dir/file(s)â€¦ (run with -h for help)");
  construct!(Opt {group,undo,paths}).to_options()
    .version(env!("CARGO_PKG_VERSION"))
    .descr("Move dir/file(s) to ðŸ—‘ â€˜~/.Trashâ€™ or restore previously trashed ones (with this tool)")
    // .header("")
    .footer(&*format!("(items are tracked via extended attributes keyed with â€˜{}â€™, batch dirs â€” with â€˜{}â€™)",xattr_key,xattr_group))
}
